{
  "hash": "1146730f6ed6ee7f5e90cb27efaa78df",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Naive Bayes Model\"\nauthor: \"Creo Hsia\"\ndate: \"2024-10-14\"\ndescription: \"A self use function for Naive Bayes classifier\"\ncategories: [ML, Classification]\nformat: \n  html:\n    highlight-style: ayu\n    code-fold: true\n    code-copy: true  # 代码块显示复制按钮\n    code-overflow: 'scroll'\n    toc: true\n    toc-depth: 3\n    number-sections: true\n    editor: visual\nknitr:\n  opts_chunk: \n    fig.path: \"image/\"\n    collapse: true\n    comment: \"#>|\"\n---\n\n\n\n------------------------------------------------------------------------\n\nWe build a Naive Bayes classifier that can handle any classification problem, assuming continuous variables follow a normal distribution. This classifier is not limited to the specific problem in the exercises.\n\n## Function `Bayesclasifier`\n\nThe following function fits a Naive Bayes model to the data, estimating prior probabilities and conditional probabilities for both continuous and categorical features. This function takes four inputs: the `data`, the `response` (a `character string` specifying which column contains the class labels), the `prior` (if provided), and the `Laplace smoothing parameter`. The output is a list containing the conditional probabilities for each variable, the prior probabilities, an indicator of which columns are numeric or categorical, and the levels of the class labels. The returned list is of class `naiveBayes`, which allows for method dispatching specific to this model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBayesclasifier <- function(data, response, prior = NULL, alpha = 0) {\n  # Step 1: Extract the target variable (response)\n  # 'label' contains the target class from the 'response' column of the data\n  label <- data[[response]]\n  label_counts <- table(label)\n  level <- unique(label)# Identify unique classes in the target variable\n  # Remove the response column from the data \n  #(since it should not be used as a predictor)\n  data[[response]] <- NULL\n  # Step 2: Calculate prior probabilities if not provided\n  if (is.null(prior)) {\n    prior <- prop.table(label_counts)\n  }\n  # Step 3: Identify numeric and categorical columns\n  is_num <- sapply(data, function(x) is.numeric(x))\n  # Step 4: Process numeric and categorical columns separately\n  tbl <- lapply(data,function(col){\n    if (is.numeric(col)){\n      # For numeric columns, calculate the mean and variance\n      #for each class in the target variable\n      means <- tapply(col, label, mean,na.rm = TRUE)\n      sd <- tapply(col, label, sd,na.rm = TRUE)\n      cbind(means,sd)\n    }\n    else {\n      # For categorical columns, calculate smoothed counts \n      # and conditional probabilities\n      # Do not display the count of NA values (this is the default behavior)\n      counts <- table(label, col)\n      # Apply Laplace smoothing to avoid zero probabilities\n      smoothed_probs <- sweep(counts + alpha, 1,\n                              label_counts+alpha*ncol(counts), \"/\")\n      # Calculate conditional probabilities\n      return(smoothed_probs)\n    }\n  })\n  # Return the model as a list containing: \n  #1) prior probabilities, 2) tables of statistics, 3) and metadata\n  result <- list(\n    prior = prior, tables = tbl, \n    isnumeric=is_num,\n    level=level)\n  # Assign a class to the result for method dispatch\n  class(result) <- \"naiveBayes_clasifier\"\n  return(result)\n} \n```\n:::\n\n\n\n## Function `predict.naiveBayes_clasifier`\n\nThe predict function takes a trained Naive Bayes model and new data as inputs, and returns predicted class labels or class probabilities depending on the specified type. For missing values (`NA`), the function handles them by assigning neutral probabilities (effectively ignoring them in the likelihood calculation).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict.naiveBayes_clasifier <- function(model, newdata, type = \"class\") {\n  logprior <- log(model$prior)   \n  len <- length(model$prior)\n  # Match newdata columns with model attributes\n  match_idx <- match(names(model$tables), names(newdata))  \n  \n  # Step 3: Preallocate log probability matrix for faster computation\n  Logprob <- matrix(0, nrow = len, ncol = nrow(newdata),dimnames = list(model$level,NULL))\n  # Step 1: Convert categorical variables to factors with matching levels\n  for (v in seq_along(match_idx)) {\n    if (model$isnumeric[v]){\n      nd <- newdata[, match_idx[v]]\n      tbl <- model$tables[[v]]\n      means <- tbl[, 1]\n      sd <- tbl[, 2]\n      notna <- !is.na(nd)\n      Logprob[,notna] <-Logprob[,notna]+ vapply(nd[notna],function(x) dnorm(x,means,sd,log=TRUE),numeric(len))\n    }\n    else {\n      nd <- factor(newdata[,match_idx[v]],\n                             levels = colnames(model$tables[[v]]))\n      notna <- !is.na(nd)\n      Logprob[,notna] <-Logprob[,notna]+ log(model$tables[[v]][,nd[notna]])\n    }\n  }\n  # Step 5: Add log-priors to the computed log-likelihoods\n  Logprob <- sweep(Logprob, 1, logprior, \"+\")\n  # Step 6: Return predictions based on the specified type ('class' or 'raw')\n  if (type == \"class\") {\n    pred_classes <- model$level[apply(Logprob,2,which.max)]\n    return(pred_classes)\n  } else {\n    # If type == \"raw\", return probabilities for all classes\n    probs <- exp(Logprob)  # Convert log-probabilities back to normal scale\n    # Normalize probabilities so they sum to 1\n    probs <- apply(probs,2,function(x)x/sum(x) ) \n    return(t(probs))\n  }\n}\n\n```\n:::\n\n\n\n## Function `confusion_matrix` and `roc_auc`\n\nThe first function computes the confusion matrix, which compares the true class labels with the predicted class labels to evaluate the performance of the classification model.\n\n> -   Input:\n>\n>     -   `true_labels`: A vector of true class labels for the dataset.\n>\n>     -   `predicted_class`: A vector of predicted class labels for the dataset. This is typically the output after selecting the class with the highest predicted probability for each instance.\n>\n> -   Output:\n>\n>     -   A confusion matrix, where rows represent the actual class labels and columns represent the predicted class labels. \n\nThe second function computes the ROC curve and Area Under the Curve (AUC) for each class in the classification problem.\n\n> -   Input: the same as above\n>\n> -   Output:\n>\n>     A list containing:\n>\n>     -   `roc_data`: A data frame with columns FPR (False Positive Rate), TPR (True Positive Rate), and class for each class, representing the ROC curve points for each class.\n>\n>     -   `auc`: A named vector where each entry is the AUC value for one class, with the class names as the vector names.\n\nWhile these functions can handle binary classification, they are especially suited for multi-class classification problems. In multi-class classification, the “one-vs-all” (or “one-vs-rest”) approach is applied. This means that for each class, the function treats it as the positive class and considers all other classes as the negative class.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to create a confusion matrix based on true labels and predicted class labels\nconfusion_matrix <- function(true_labels, predicted_class) {\n  class_names <- unique(c(true_labels, predicted_class))\n  \n  # Create an empty confusion matrix\n  conf_matrix <- matrix(0, nrow = length(class_names), ncol = length(class_names),\n                        dimnames = list(\"Actual\" = class_names, \"Predicted\" = class_names))\n  \n  # Populate the confusion matrix\n  for (i in seq_along(true_labels)) {\n    true_class <- true_labels[i]\n    pred_class <- predicted_class[i]\n    conf_matrix[true_class, pred_class] <- conf_matrix[true_class, pred_class] + 1\n  }\n  \n  return(conf_matrix)\n}\nroc_auc <- function(true_labels, predicted_probs) {\n  # Get unique class names\n  classes <- colnames(predicted_probs)\n  \n  # Internal function to compute sensitivity and specificity with vectorized operations\n  compute_roc_auc <- function(binary_labels, pos_prob) {\n    # Sort the predicted probabilities and corresponding labels once\n    order_index <- order(pos_prob, decreasing = TRUE)\n    sorted_labels <- binary_labels[order_index]\n    \n    # Number of positive and negative samples\n    M <- sum(sorted_labels == 1)\n    N <- sum(sorted_labels == 0)\n    \n    # Cumulative sum to calculate sensitivity (sen) and specificity (spe)\n    sen <- cumsum(sorted_labels == 1)  # True positives as we go down the list\n    spe <- cumsum(sorted_labels == 0)  # False positives as we go down the list\n    \n    # Sensitivity and specificity as ratios\n    TPR <- c(0, sen / M)\n    FPR <- c(0, spe / N)\n    \n    # Calculate AUC using the trapezoidal rule (efficiently using vectorized operations)\n    auc <- sum((FPR[-1] - FPR[-length(FPR)]) * (TPR[-1] + TPR[-length(TPR)])) / 2\n    \n    # Return results as a matrix for better performance\n    return(list(roc = data.frame(FPR = FPR, TPR = TPR), auc = auc))\n  }\n  \n  # Check if it's a binary classification problem\n  if (length(classes) == 2) {\n    class_name <- classes[1]\n    binary_labels <- ifelse(true_labels == class_name, 1, 0)\n    pos_prob <- predicted_probs[, class_name]\n    \n    # Compute ROC for the binary classification\n    roc_auc_result <- compute_roc_auc(binary_labels, pos_prob)\n    roc_data <- roc_auc_result$roc\n    roc_data$class <- class_name  # Add class column\n    auc <- setNames(roc_auc_result$auc, class_name)  # Return AUC as named vector\n    \n  } else {\n    # For multi-class classification, use one-vs-all approach\n    roc_data_list <- list()\n    auc <- setNames(rep(NA, length(classes)), classes)  # Initialize a named vector for AUC\n    \n    # Loop through each class and calculate sensitivity and specificity\n    for (class_name in classes) {\n      binary_labels <- ifelse(true_labels == class_name, 1, 0)\n      pos_prob <- predicted_probs[, class_name]\n      \n      # Compute ROC for the current class\n      class_roc_auc_result <- compute_roc_auc(binary_labels, pos_prob)\n      class_roc_data <- class_roc_auc_result$roc\n      class_roc_data$class <- class_name  # Add class column\n      \n      # Store ROC data and AUC for the current class\n      roc_data_list[[class_name]] <- class_roc_data\n      auc[class_name] <- class_roc_auc_result$auc  # Assign AUC to the named vector\n    }\n    \n    # Combine ROC results for all classes into a single data frame\n    roc_data <- do.call(rbind, roc_data_list)\n  }\n  result <- list(roc_data = roc_data, auc = auc)\n  class(result) <- \"roc_auc\"\n  return(result)\n}\n```\n:::\n\n\n\n## Function `plot.roc_auc`\n\nA `ggplot2` plot displaying the ROC curves for all classes. Each class is represented by a different color, and the AUC values are shown on the plot to summarize the classifier’s performance for each class.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot.roc_auc <- function(x, ...) {\n  # Extract ROC data and AUC values\n  roc_data <- x$roc_data\n  auc_values <- x$auc\n  \n  # Create a data frame for AUC values to annotate\n  auc_annotations <- data.frame(\n    class = names(auc_values),\n    auc = round(auc_values, 4),\n    label = paste(names(auc_values), \": \", round(auc_values, 4), sep = \"\")\n  )\n  \n  # Plot all ROC curves, using different colors for each class\n  p <- ggplot(roc_data, aes(x = FPR, y = TPR, color = class)) +\n    geom_line(linewidth = 1) +\n    geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"gray\") +\n    labs(title = \"ROC Curves for All Classes\",\n         x = \"False Positive Rate\", y = \"True Positive Rate\") +\n    theme_minimal()\n  \n  # Annotate AUC values at the top-right corner without any box or frame\n  auc_text <- paste(\"AUC:\\n\", paste(auc_annotations$label, collapse = \"\\n\"))\n  \n  p <- p + annotate(\"text\", x = 0.8, y = 0.6, hjust = 0,\n                    label = auc_text, size = 3, color = \"black\")\n  \n  # Display the plot\n  return(p)\n}\n```\n:::\n\n\n\n## A real example\n\nWe apply the custom Naive Bayes classifier to the Adult dataset for classification (the data can be found in [Github](https://github.com/CreoHsia/myblog/tree/main/posts/Naive%20bayes%20model)) . We also compare its performance in terms of speed with the naiveBayes function from the e1071 R package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(ggplot2)\ndata <- read.csv(\"adult.data\",\n                 na.strings = \" ?\", header=FALSE)\nnewdata <- read.table(\"adult.test\",\n                      sep=\",\", skip = 1,na.strings = \" ?\")\nnewdata$V15 <- gsub(\"\\\\.$\", \"\", newdata$V15)\nsystem.time({\n  model <- Bayesclasifier(data,\"V15\",alpha = 1)\n  pred <- predict(model,newdata,\"raw\")  \n  roc <- roc_auc(newdata$V15,pred)\n})\n#>|    user  system elapsed \n#>|   0.159   0.006   0.165\nlibrary(e1071)\nsystem.time({\n  model2 <- e1071::naiveBayes(V15~.,data=data)\n  pred2 <- predict(model2,newdata)\n})\n#>|    user  system elapsed \n#>|   1.299   0.006   1.305\n```\n:::\n\n\n\nFaster than the function in `e1071`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nconfusion_matrix(newdata$V15,pred <- predict(model,newdata,\"class\"))\n#>|         Predicted\n#>| Actual    <=50K  >50K\n#>|    <=50K  11547   888\n#>|    >50K    1863  1983\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nplot(roc)\n```\n\n::: {.cell-output-display}\n![](image/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## Function `print.naiveBayes_clasifier`\n\nThis function prints a summary of the fitted model, including the prior probabilities, the conditional probabilities for each variable, and an indication of whether each variable is numeric or categorical.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint.naiveBayes_clasifier <- function(model) {\n  cat(\"Naive Bayes Model\\n\")\n  cat(\"=================\\n\")\n  \n  # Print class levels\n  cat(\"\\nClass Levels:\\n\")\n  print(model$level)\n  \n  # Print prior probabilities\n  cat(\"\\nPrior Probabilities:\\n\")\n  print(model$prior)\n  \n  # Loop through the model tables to display statistics for each feature\n  cat(\"\\nFeature Statistics:\\n\")\n  for (i in seq_along(model$tables)) {\n    feature_name <- names(model$tables)[i]\n    cat(\"\\nFeature:\", feature_name, \"\\n\")\n    \n    if (model$isnumeric[i]) {\n      # For numeric features, print mean and standard deviation\n      cat(\"Type: Numeric\\n\")\n      stats <- model$tables[[i]]\n      print(data.frame(\n        Mean = stats[, 1], SD = stats[, 2]))\n    } else {\n      # For categorical features, print conditional probabilities\n      cat(\"Type: Categorical\\n\")\n      probs <- model$tables[[i]]\n      print(as.data.frame.matrix(probs))\n    }\n  }\n  \n  cat(\"\\n=================\\n\")\n}\n\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(model)\n#>| Naive Bayes Model\n#>| =================\n#>| \n#>| Class Levels:\n#>| [1] \" <=50K\" \" >50K\" \n#>| \n#>| Prior Probabilities:\n#>| label\n#>|     <=50K      >50K \n#>| 0.7591904 0.2408096 \n#>| \n#>| Feature Statistics:\n#>| \n#>| Feature: V1 \n#>| Type: Numeric\n#>|            Mean       SD\n#>|  <=50K 36.78374 14.02009\n#>|  >50K  44.24984 10.51903\n#>| \n#>| Feature: V2 \n#>| Type: Categorical\n#>|         Federal-gov  Local-gov  Never-worked   Private  Self-emp-inc\n#>|  <=50K   0.02385959 0.05972986  0.0003235199 0.7171627    0.02001779\n#>|  >50K    0.04739457 0.07873614  0.0001274048 0.6324373    0.07937317\n#>|         Self-emp-not-inc  State-gov  Without-pay\n#>|  <=50K        0.07351990 0.03825623 0.0006065998\n#>|  >50K         0.09236845 0.04510129 0.0001274048\n#>| \n#>| Feature: V3 \n#>| Type: Numeric\n#>|            Mean       SD\n#>|  <=50K 190340.9 106482.3\n#>|  >50K  188005.0 102541.8\n#>| \n#>| Feature: V4 \n#>| Type: Categorical\n#>|               10th        11th        12th      1st-4th     5th-6th     7th-8th\n#>|  <=50K 0.035252264 0.045116429 0.016211190 0.0065895860 0.012855757 0.024539133\n#>|  >50K  0.008018328 0.007763778 0.004327351 0.0008909253 0.002163676 0.005218277\n#>|                9th  Assoc-acdm  Assoc-voc  Bachelors   Doctorate   HS-grad\n#>|  <=50K 0.019728331  0.03246281 0.04131630  0.1267384 0.004366106 0.3568483\n#>|  >50K  0.003563701  0.03385516 0.04607356  0.2828051 0.039073438 0.2133130\n#>|           Masters   Preschool  Prof-school  Some-college\n#>|  <=50K 0.03092658 0.002102199  0.006225744     0.2387209\n#>|  >50K  0.12218404 0.000127275  0.053964618     0.1766578\n#>| \n#>| Feature: V5 \n#>| Type: Numeric\n#>|             Mean       SD\n#>|  <=50K  9.595065 2.436147\n#>|  >50K  11.611657 2.385129\n#>| \n#>| Feature: V6 \n#>| Type: Categorical\n#>|          Divorced  Married-AF-spouse  Married-civ-spouse  Married-spouse-absent\n#>|  <=50K 0.16099810       0.0005661827           0.3350588            0.015570025\n#>|  >50K  0.05912334       0.0014016310           0.8528287            0.004459735\n#>|         Never-married   Separated    Widowed\n#>|  <=50K     0.41222146 0.038823958 0.03676143\n#>|  >50K      0.06269113 0.008537207 0.01095821\n#>| \n#>| Feature: V7 \n#>| Type: Categorical\n#>|         Adm-clerical  Armed-Forces  Craft-repair  Exec-managerial\n#>|  <=50K    0.13196410  0.0003638716     0.1282041       0.08486294\n#>|  >50K     0.06467218  0.0002546149     0.1183959       0.25066836\n#>|         Farming-fishing  Handlers-cleaners  Machine-op-inspct  Other-service\n#>|  <=50K       0.03557856         0.05195278         0.07087410     0.12771893\n#>|  >50K        0.01476766         0.01107575         0.03195417     0.01756843\n#>|         Priv-house-serv  Prof-specialty  Protective-serv     Sales\n#>|  <=50K     0.0060240964      0.09226166       0.01774885 0.1078677\n#>|  >50K      0.0002546149      0.23679185       0.02698918 0.1252705\n#>|         Tech-support  Transport-moving\n#>|  <=50K    0.02611789        0.05166977\n#>|  >50K     0.03615532        0.04086569\n#>| \n#>| Feature: V8 \n#>| Type: Categorical\n#>|          Husband  Not-in-family  Other-relative   Own-child  Unmarried\n#>|  <=50K 0.2942651      0.3013023     0.038218879 0.202297177 0.13059128\n#>|  >50K  0.7543010      0.1092137     0.004842615 0.008665732 0.02790875\n#>|              Wife\n#>|  <=50K 0.03332524\n#>|  >50K  0.09506818\n#>| \n#>| Feature: V9 \n#>| Type: Categorical\n#>|         Amer-Indian-Eskimo  Asian-Pac-Islander      Black       Other     White\n#>|  <=50K         0.011162791          0.03089990 0.11073812 0.009989889 0.8372093\n#>|  >50K          0.004715779          0.03530461 0.04945195 0.003313790 0.9072139\n#>| \n#>| Feature: V10 \n#>| Type: Categorical\n#>|           Female      Male\n#>|  <=50K 0.3880349 0.6119651\n#>|  >50K  0.1504526 0.8495474\n#>| \n#>| Feature: V11 \n#>| Type: Numeric\n#>|             Mean         SD\n#>|  <=50K  148.7525   963.1393\n#>|  >50K  4006.1425 14570.3790\n#>| \n#>| Feature: V12 \n#>| Type: Numeric\n#>|             Mean       SD\n#>|  <=50K  53.14292 310.7558\n#>|  >50K  195.00153 595.4876\n#>| \n#>| Feature: V13 \n#>| Type: Numeric\n#>|            Mean       SD\n#>|  <=50K 38.84021 12.31899\n#>|  >50K  45.47303 11.01297\n#>| \n#>| Feature: V14 \n#>| Type: Categorical\n#>|            Cambodia      Canada       China     Columbia        Cuba\n#>|  <=50K 0.0005250192 0.003352046 0.002261621 0.0023423933 0.002867412\n#>|  >50K  0.0010149708 0.005074854 0.002664298 0.0003806141 0.003298655\n#>|         Dominican-Republic      Ecuador  El-Salvador     England       France\n#>|  <=50K        0.0027866403 0.0010096523  0.003957837 0.002463552 0.0007269496\n#>|  >50K         0.0003806141 0.0006343568  0.001268714 0.003933012 0.0016493276\n#>|            Germany      Greece    Guatemala        Haiti  Holand-Netherlands\n#>|  <=50K 0.003796293 0.000888494 0.0025039376 0.0016558297        8.077218e-05\n#>|  >50K  0.005709211 0.001141842 0.0005074854 0.0006343568        1.268714e-04\n#>|            Honduras         Hong      Hungary       India        Iran\n#>|  <=50K 0.0005250192 0.0006057914 0.0004442470 0.002463552 0.001050038\n#>|  >50K  0.0002537427 0.0008880995 0.0005074854 0.005201725 0.002410556\n#>|             Ireland       Italy     Jamaica       Japan         Laos\n#>|  <=50K 0.0008077218 0.001978918 0.002907799 0.001575058 0.0006865635\n#>|  >50K  0.0007612281 0.003298655 0.001395585 0.003171784 0.0003806141\n#>|             Mexico    Nicaragua  Outlying-US(Guam-USVI-etc)         Peru\n#>|  <=50K 0.024675902 0.0013327410                0.0006057914 0.0012115827\n#>|  >50K  0.004313626 0.0003806141                0.0001268714 0.0003806141\n#>|         Philippines      Poland     Portugal  Puerto-Rico     Scotland\n#>|  <=50K  0.005573281 0.001978918 0.0013731271  0.004159767 0.0004038609\n#>|  >50K   0.007866024 0.001649328 0.0006343568  0.001649328 0.0005074854\n#>|              South      Taiwan     Thailand  Trinadad&Tobago  United-States\n#>|  <=50K 0.002625096 0.001292355 0.0006461775     0.0007269496      0.8884940\n#>|  >50K  0.002156813 0.002664298 0.0005074854     0.0003806141      0.9099213\n#>|             Vietnam   Yugoslavia\n#>|  <=50K 0.0025443237 0.0004442470\n#>|  >50K  0.0007612281 0.0008880995\n#>| \n#>| =================\n```\n:::\n\n\n\n## Supervisor-provided R code for Naive Bayes Classifier\n\nThe followings are the code provided from my supervisor, which suit for the adult data only.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\nptm <- proc.time()\n\n#### read training and tesing\nD = read.table(\"adult.data\",sep=\",\",stringsAsFactors = F)\nDt = read.table(\"adult.test\",sep=\",\",skip=1,stringsAsFactors = F)\n\ncolnames(D)= c(\"age\",\"workclass\",\"fnlwgt\",\"education\",\"education_num\",\"matrital_status\",\n               \"occupation\",\"relationship\",\"race\",\"sex\",\"capital_gain\",\"capital_loss\",\n               \"hours_per_week\",\"native_country/region\",\"salary\")\ncolnames(Dt) = colnames(D)\n\n#### extract discrete variables\ndis.indice = c(2,4,6,7,8,9,10,14)\ncon.indice = c(1,3,5,11,12,13)\nis.class.zero = (D[,15]==\" <=50K\")\n\nYt = rep(0,nrow(Dt))\nYt[Dt[,15]==\" >50K.\"] = 1\n\n#### training and testing\nalpha = 1\nn0 = sum(is.class.zero)\nn1 = sum(!is.class.zero)\n\nP0 = matrix(0,nrow=nrow(Dt),ncol=(ncol(Dt)-1))\nP1 = P0\n\n##### for discrete variables\nfor (i in dis.indice){\n  x = c(D[is.class.zero,i],D[!is.class.zero,i],Dt[,i])\n  x = as.factor(x)\n  \n  xnames = levels(x)\n  loc = which(xnames==\" ?\")\n  if (length(loc)!=0){\n    xnames = xnames[-loc]\n  }\n  d = length(xnames)\n  \n  #### training and testing at the same time\n  for (j in 1:d){\n    P0[Dt[,i]==xnames[j],i] = log((sum(D[is.class.zero,i]==xnames[j])+alpha)/(n0+d*alpha))\n    P1[Dt[,i]==xnames[j],i] = log((sum(D[!is.class.zero,i]==xnames[j])+alpha)/(n1+d*alpha))\n  }\n}\n\n\n##### for continuous variables\nfor (i in con.indice){\n  sigma0 = sd(D[is.class.zero,i]); sigma1 = sd(D[!is.class.zero,i])\n  mu0 = mean(D[is.class.zero,i]); mu1 = mean(D[!is.class.zero,i])\n  P0[,i] = -log(sigma0)-(Dt[,i]-mu0)^2/sigma0^2/2\n  P1[,i] = -log(sigma1)-(Dt[,i]-mu1)^2/sigma1^2/2\n}\n\n#### NB result\nP0 = cbind(P0,rep(log(n0/(n0+n1)),nrow(P0)))\nP1 = cbind(P1,rep(log(n1/(n0+n1)),nrow(P1)))\ndiff.P = P0 - P1\ncolnames(diff.P) = c(\"age\",\"workclass\",\"fnlwgt\",\"education\",\"education_num\",\"matrital_status\",\n  \"occupation\",\"relationship\",\"race\",\"sex\",\"capital_gain\",\"capital_loss\",\n  \"hours_per_week\",\"native_country/region\",\"prior\")\n\ndiff = rowSums(diff.P)          \n\n#M0 = rowSums(P0)+log(n0/(n0+n1))\n#M1 = rowSums(P1)+log(n1/(n0+n1))\n#diff = M0-M1\n\n###### plot ROC\nYt.sorted = Yt[sort(diff,index.return=T)[[\"ix\"]]]\nsen = rep(0,length(Yt.sorted)+1)\nspe = rep(sum(Yt.sorted==0),length(Yt.sorted)+1)\nfor (j in 1:length(Yt.sorted)){\n  if (Yt.sorted[j]==1){\n    sen[j+1]=sen[j]+1;spe[j+1]=spe[j]\n  }else{\n    spe[j+1]=spe[j]-1;sen[j+1]=sen[j]\n  }\n}\nsen = sen/sum(Yt.sorted==1)\nspe = spe/sum(Yt.sorted==0)\n\nauc = sum((spe[1:(length(spe)-1)]-spe[2:length(spe)])*sen[1:(length(sen)-1)])\n\n### confusion matrix\nConfmat = matrix(NA,nrow = 2,ncol = 2)\nrownames(Confmat) = c(\"<=50K\",\">50K\")\ncolnames(Confmat) = c(\"Predict <=50K\",\"Predict >50K\")\nConfmat[\"<=50K\",\"Predict <=50K\"] = sum(diff>0 & Yt==0)\nConfmat[\"<=50K\",\"Predict >50K\"] = sum(diff<0 & Yt==0)\nConfmat[\">50K\",\"Predict <=50K\"] = sum(diff>0 & Yt==1)\nConfmat[\">50K\",\"Predict >50K\"] = sum(diff<0 & Yt==1)\nacc = sum(Confmat[c(1,4)])/sum(Confmat)\n```\n:::\n\n\n\nResult:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nConfmat\n#>|       Predict <=50K Predict >50K\n#>| <=50K         11547          888\n#>| >50K           1863         1983\ncat(\"Total accuary =\", acc)\n#>| Total accuary = 0.83103\n\nproc.time() - ptm\n#>|    user  system elapsed \n#>|   0.216   0.008   0.224\nplot(1-spe,sen,type=\"l\",col=\"blue\",main = paste0(\"ROC curve, AUC =\",round(auc,3)),ylab = \"sensitivity\",xlab = \"1-specificity\")\nabline(a=0,b=1)\n```\n\n::: {.cell-output-display}\n![](image/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}