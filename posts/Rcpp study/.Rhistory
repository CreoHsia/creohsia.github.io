src <-
"double rcpp_sum(NumericVector v){
src <-
"double rcpp_sum(NumericVector v){
src <-"double rcpp_sum(NumericVector v){
src <-"double rcpp_sum(NumericVector v){
double sum = 0;
for(int i=0; i<v.length(); ++i){
sum += v[i];
}
return(sum);
}
"
Rcpp::cppFunction(src)
rcpp_sum(1:10)
library(Rcpp)
sourceCpp('sum.cpp')
rcpp_sum(1:10)
# Showing maximum value of double.
evalCpp('std::numeric_limits<double>::max()')
v <- c(1,2,3,4,5)
A <- 2.0
sapply(v, function(x){A*x})
library(Rcpp)
sourceCpp('lambda.cpp')
rcpp_lambda_1()
evalCpp(Rprintf("The value of x is: %d\n", 10);)
evalCpp(Rprintf("The value of x is: %d\n", 10))
}'
mat <- '#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
NumericVector rcpp_matrix(){
// Creating a vector object
NumericVector v = {1,2,3,4};
// Set the number of rows and columns to attribute dim of the vector object.
v.attr("dim") = Dimension(2, 2);
// Return the vector to R
return v;
}'
sourceCpp(code=mat)
rcpp_matrix()
cppFunction("// [[Rcpp::export]]
NumericMatrix create_diag_matrix(int size, NumericVector x) {
// Create a diagonal matrix of the given size with x on the diagonal
NumericMatrix mat = NumericMatrix::diag(size, x);
return mat;
}")
cppFunction("
NumericMatrix create_diag_matrix(int size, NumericVector x) {
// Create a diagonal matrix of the given size with x on the diagonal
NumericMatrix mat = NumericMatrix::diag(size, x);
return mat;
}")
cppFunction("
NumericMatrix create_diag_matrix(int size, double x) {
// Create a diagonal matrix of the given size with x on the diagonal
NumericMatrix mat = NumericMatrix::diag(size, x);
return mat;
}")
create_diag_matrix(5,2)
> `x1` and `x2` must either be `scalars` or `vectors`. If they are vectors, their length must match the **length of v**. This ensures that there is a corresponding element in `x1` or `x2` for each element in `v`.
ifelse(c(1,1,0),c(1,2,3),(-1,-2,-3))
ifelse(c(1,1,0),c(1,2,3),c(-1,-2,-3))
cppFunction("DataFrame rcpp_df(){
// Creating vector v
NumericVector v = {1,2};
// Creating DataFrame df
DataFrame df = DataFrame::create( Named("V1") = v,         // simple assign
cppFunction("DataFrame rcpp_df(){
NumericVector v = {1,2};
// Creating DataFrame df
DataFrame df = DataFrame::create( Named("V1") = v,         // simple assign
cppFunction("DataFrame rcpp_df(){
NumericVector v = {1,2};
DataFrame df = DataFrame::create( Named("V1") = v,         // simple assign
cppFunction("DataFrame rcpp_df(){
NumericVector v = {1,2};
DataFrame df = DataFrame::create( Named("V1") = v,
cppFunction("// [[Rcpp::export]]
DataFrame rcpp_df(){
// Creating vector v
NumericVector v = {1,2};
// Creating DataFrame df
DataFrame df = DataFrame::create( Named("V1") = v,         // simple assign
cppFunction("
// [[Rcpp::plugins("cpp11")]]
df <- "/ [[Rcpp::plugins("cpp11")]]
df <- "/ [[Rcpp::plugins("cpp11")]]
df <- "// [[Rcpp::plugins("cpp11")]]
df <- "
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::plugins("cpp11")]]
#| eval: true
src <-
"#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
double rcpp_sum(NumericVector v){
double sum = 0;
for(int i=0; i<v.length(); ++i){
sum += v[i];
}
return(sum);
}"
sourceCpp(code = src)
rcpp_sum(1:10)
df <- "#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::plugins("cpp11")]]
df <- "#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
DataFrame rcpp_df(){
// Creating vector v
NumericVector v = {1,2};
// Creating DataFrame df
DataFrame df = DataFrame::create( Named("V1") = v,         // simple assign
sourceCpp("df.cpp")
df
df()
rcpp_df()
}'
df <- '#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
DataFrame rcpp_df(){
// Creating vector v
NumericVector v = {1,2};
// Creating DataFrame df
DataFrame df = DataFrame::create( Named("V1") = v,         // simple assign
Named("V2") = clone(v)); // using clone()
// Changing vector v
v = v * 2;
return df;
}'
sourceCpp(code="df")
df <- '#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
DataFrame rcpp_df(){
// Creating vector v
NumericVector v = {1,2};
// Creating DataFrame df
DataFrame df = DataFrame::create( Named("V1") = v,         // simple assign
Named("V2") = clone(v)); // using clone()
// Changing vector v
v = v * 2;
return df;
}'
sourceCpp(code="df")
df <- '#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
DataFrame rcpp_df(){
// Creating vector v
NumericVector v = {1,2};
// Creating DataFrame df
DataFrame df = DataFrame::create( Named("V1") = v,         // simple assign
Named("V2") = clone(v)); // using clone()
// Changing vector v
v = v * 2;
return df;
}'
sourceCpp(code= "df")
sourceCpp("df.cpp")
rcpp_df()
df <- '#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
DataFrame rcpp_df(){
// Creating vector v
NumericVector v = {1,2};
// Creating DataFrame df
DataFrame df = DataFrame::create( Named("V1") = v,         // simple assign
Named("V2") = clone(v)); // using clone()
// Changing vector v
v = v * 2;
return df;
}'
sourceCpp(code=df)
rcpp_df()
}'
sort_cpp <- '#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
NumericVector sort_numeric_vector(NumericVector x) {
// Sort the vector in ascending order (default)
return Rcpp::sort(x);
}'
sourceCpp(code=sort_cpp)
sort_cpp <- '#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
NumericVector sort_numeric_vector(NumericVector x) {
std::sort(x.begin(), x.end());
return x
}'
sourceCpp(code=sort_cpp)
sort_cpp <- '#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
NumericVector sort_numeric_vector(NumericVector x) {
std::sort(x.begin(), x.end());
return x;
}'
sourceCpp(code=sort_cpp)
sort_cpp(1:10)
sort_numeric_vector(1:10)
sort_numeric_vector(1,2,1,3,15)
sort_numeric_vector(c(1,2,1,3,15))
sort_cpp <- '#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
NumericVector sort_numeric_vector(NumericVector x) {
std::order(x.begin(), x.end());
return x;
}'
sourceCpp(code=sort_cpp)
system.file("include", package = "Rcpp")
#include <Rcpp.h>
using namespace Rcpp;
#include <Rcpp.h>
using namespace Rcpp;
#include <Rcpp.h>
using namespace Rcpp;
#include <Rcpp.h>
using namespace Rcpp;
Rcpp::sourceCpp("df.cpp")
system.file("include", package = "Rcpp")
R.home("lib")
Rcpp::sourceCpp("algorithm.cpp")
Rcpp::sourceCpp("algorithm.cpp")
sourceCpp("algorithm.cpp")
sort_cpp <- '#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
NumericVector sort_numeric_vector(NumericVector x) {
std::sort(x.begin(), x.end());
return x;
}'
sourceCpp(code=sort_cpp)
sort_numeric_vector(c(1,31,14,2,453))
