{
  "hash": "7b53de20354cd5d43fec66e609a8081b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Rcpp studying records\"\nauthor: \"Creo Hsia\"\ndate: \"2024-10-10\"\nformat: \n  html:\n    code-fold: true # 折叠代码块\n    code-copy: true  # 代码块显示复制按钮\n    code-overflow: 'scroll'\n    toc: true\n    toc-depth: 2\n    number-sections: true\n    editor: visual\n    \nknitr:\n  opts_chunk: \n    collapse: true\n    comment: \"#>\" \n---\n\n\n\n\n\n# Rcpp\n\n## Format for defining a function in Rcpp\n\nThe following code shows the basic format for defining a Rcpp function.\n\n\n\n::: {.cell}\n\n```{.cpp .cell-code}\n\n#include<Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nRETURN_TYPE FUNCTION_NAME(ARGUMENT_TYPE ARGUMENT){\n\n    //do something\n\n    return RETURN_VALUE;\n}\n\n```\n:::\n\n\n\n-   `#include<Rcpp.h>` : This sentence enables us to use classes and functions defined by the Rcpp package\n\n-   `using namespace Rcpp;` : this sentence enables us to use them directly, other wise you need to declare that we use these function from package Rcpp by, e.g. `Rcpp::NumericVector`.\n\n<!-- -->\n\n-   `// [[Rcpp::export]]`：The function defined just below this sentence will be accessible from R.\n\n-   `RETURN_TYPE FUNCTION_NAME(ARGUMENT_TYPE ARGUMENT){}`：We need to specify data types of functions and arguments.\n\n## Compiling the code\n\nThe function `Rcpp::sourceCpp()` will compile your source code and load the defined function into R. The below code defines a function that calculates the sum of a vector.\n\n\n\n::: {.cell}\n\n```{.cpp .cell-code}\n//sum.cpp\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\ndouble rcpp_sum(NumericVector v){\n    double sum = 0;\n    for(int i=0; i<v.length(); ++i){\n        sum += v[i];\n    }\n    return(sum);\n}\n```\n:::\n\n\n\nNow we can load it into R by\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(Rcpp)\nsourceCpp('sum.cpp')\n```\n:::\n\n\n\n## Executing the function\n\nWe can use our Rcpp functions as usual R functions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrcpp_sum(1:10)\n#> [1] 55\n```\n:::\n\n\n\n## Embedding Rcpp code in our R code\n\nWe can write Rcpp code in our R code in 3 ways.\n\n### `sourceCpp()`\n\nSave Rcpp code as string object in R and compile it with `sourceCpp()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsrc <-\n\"#include <Rcpp.h>\nusing namespace Rcpp;\n// [[Rcpp::export]]\ndouble rcpp_sum(NumericVector v){\n  double sum = 0;\n  for(int i=0; i<v.length(); ++i){\n    sum += v[i];\n  }\n  return(sum);\n}\"\n\nsourceCpp(code = src)\nrcpp_sum(1:10)\n#> [1] 55\n```\n:::\n\n\n\n### `cppFunction()`\n\nWe can omit `#include <Rcpp.h>` and `using namespase Rcpp` when we use `cppFunction()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsrc <-\"double rcpp_sum(NumericVector v){\n    double sum = 0;\n    for(int i=0; i<v.length(); ++i){\n      sum += v[i];\n    }\n    return(sum);\n  }\n  \"\nRcpp::cppFunction(src)\nrcpp_sum(1:10)\n#> [1] 55\n```\n:::\n\n\n\n### `evalCpp()`\n\nYou can evaluate a single C++ statement by using `evalCpp()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Showing maximum value of double.\nevalCpp('std::numeric_limits<double>::max()')\n#> [1] 1.797693e+308\n```\n:::\n\n\n\n## C++ 11\n\nC++ 11 is a standard of C++ newly established in 2011. Many new features have been added to make C++ even easier for beginners.\n\n::: callout-important\nThe code examples in this document are written with C++11 enabled.\n:::\n\n### Enabling C++11\nTo enable `C++11`, add the following decription in our Rcpp code.\n> `// [[Rcpp::plugins(\"cpp11\")]]`\n\n### Recommended C++11 features\n#### Initializer list\n\n\n\n::: {.cell}\n\n```{.cpp .cell-code}\n// Initialize Vector\n// The next three are the same as c (1, 2, 3).\nNumericVector v1 = NumericVector::create(1.0, 2.0, 3.0);\nNumericVector v2 = {1.0, 2.0, 3.0};\nNumericVector v3   {1.0, 2.0, 3.0}; // You can omit \"=\".\n```\n:::\n\n\n\n\n#### decltype\n\nBy using decltype, you can declare a variable of the same type as an existing variable.\n\n\n\n::: {.cell}\n\n```{.cpp .cell-code}\nint i;\ndecltype(i) x; // variable \"x\" will be int\n```\n:::\n\n\n\n\n#### Range-vased for-loop\nWe can write a for statement with the same style as R.\n\n\n::: {.cell}\n\n```{.cpp .cell-code}\nIntegerVector v {1,2,3};\nint sum=0;\nfor(auto& x : v) {\n  sum += x;\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}